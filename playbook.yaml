---
- name: upgrade, update apt packages, install nginx, git, mariadb-client
  hosts: localhost
  become: true

  tasks:
    - name: Update and upgrade apt packages
      apt:
        update_cache: yes
        upgrade: yes

    - name: Install Nginx
      apt:
        name: nginx
        state: present
    
    - name: Ensure Nginx is enabled to start on boot
      systemd:
        name: nginx
        enabled: yes

    - name: Ensure Nginx is started
      systemd:
        name: nginx
        state: started

    - name: Install MariaDB Client
      apt:
        name: mariadb-client
        state: present

    - name: Install Git
      apt:
        name: git
        state: present

#terraform
- name: Install Terraform on localhost
  hosts: localhost
  become: true

  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install gnupg and software-properties-common
      apt:
        name:
          - gnupg
          - software-properties-common
        state: present

    - name: Download HashiCorp GPG key and add to keyring
      ansible.builtin.shell: |
        wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | tee /usr/share/keyrings/hashicorp-archive-keyring.gpg > /dev/null
      args:
        creates: /usr/share/keyrings/hashicorp-archive-keyring.gpg

    - name: Add HashiCorp repository
      ansible.builtin.shell: |
        echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/hashicorp.list
      args:
        creates: /etc/apt/sources.list.d/hashicorp.list

    - name: Update apt cache after adding HashiCorp repo
      apt:
        update_cache: yes

    - name: Install Terraform
      apt:
        name: terraform
        state: present

    - name: Verify Terraform installation
      command: terraform --version
      register: terraform_version

    - name: Display Terraform version
      debug:
        msg: "Terraform version: {{ terraform_version.stdout }}"

#Monitoring
- name: Install and configure Prometheus
  hosts: all
  become: yes
  tasks:
  
    - name: Create prometheus group
      ansible.builtin.group:
        name: prometheus
        system: yes

    - name: Create prometheus user
      ansible.builtin.user:
        name: prometheus
        shell: /sbin/nologin
        group: prometheus
        system: yes

    - name: Create Prometheus configuration directory
      ansible.builtin.file:
        path: /etc/prometheus
        state: directory
        owner: prometheus
        group: prometheus

    - name: Create Prometheus data directory
      ansible.builtin.file:
        path: /var/lib/prometheus
        state: directory
        owner: prometheus
        group: prometheus

    - name: Download Prometheus
      ansible.builtin.get_url:
        url: https://github.com/prometheus/prometheus/releases/download/v2.53.2/prometheus-2.53.2.linux-amd64.tar.gz
        dest: /tmp/prometheus-2.53.2.linux-amd64.tar.gz

    - name: Extract Prometheus archive
      ansible.builtin.unarchive:
        src: /tmp/prometheus-2.53.2.linux-amd64.tar.gz
        dest: /tmp/
        remote_src: yes

    - name: Move Prometheus binaries
      ansible.builtin.copy:
        src: /tmp/prometheus-2.53.2.linux-amd64/prometheus
        dest: /usr/local/bin/prometheus
        owner: prometheus
        group: prometheus
        mode: '0755'

    - name: Move promtool binary
      ansible.builtin.copy:
        src: /tmp/prometheus-2.53.2.linux-amd64/promtool
        dest: /usr/local/bin/promtool
        owner: prometheus
        group: prometheus
        mode: '0755'

    - name: Move consoles and libraries to /etc/prometheus
      ansible.builtin.copy:
        src: /tmp/prometheus-2.53.2.linux-amd64/consoles
        dest: /etc/prometheus/consoles
        owner: prometheus
        group: prometheus
        remote_src: yes

    - name: Move console_libraries to /etc/prometheus
      ansible.builtin.copy:
        src: /tmp/prometheus-2.53.2.linux-amd64/console_libraries
        dest: /etc/prometheus/console_libraries
        owner: prometheus
        group: prometheus
        remote_src: yes

    - name: Configure prometheus.yml
      ansible.builtin.copy:
        dest: /etc/prometheus/prometheus.yml
        content: |
          global:
            scrape_interval: 15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.
            evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.
            # scrape_timeout is set to the global default (10s).

          # Alertmanager configuration
          alerting:
            alertmanagers:
              - static_configs:
                  - targets:
                    # - alertmanager:9093

          # Load rules once and periodically evaluate them according to the global 'evaluation_interval'.
          rule_files:
            # - "first_rules.yml"
            # - "second_rules.yml"

          # A scrape configuration containing exactly one endpoint to scrape:
          # Here it's Prometheus itself.
          scrape_configs:
            - job_name: "prometheus"
              static_configs:
                - targets: ["localhost:9090"]

            - job_name: "node_exporter"
              static_configs:
                - targets: ["{{ ansible_default_ipv4.address }}:9100"]
        owner: prometheus
        group: prometheus
        mode: '0644'

    - name: Set ownership for Prometheus directories
      ansible.builtin.file:
        path: /var/lib/prometheus
        owner: prometheus
        group: prometheus
        recurse: yes

    - name: Create Prometheus systemd service file
      ansible.builtin.copy:
        dest: /etc/systemd/system/prometheus.service
        content: |
          [Unit]
          Description=Prometheus
          Wants=network-online.target
          After=network-online.target

          [Service]
          User=prometheus
          Group=prometheus
          Type=simple
          ExecStart=/usr/local/bin/prometheus \
            --config.file /etc/prometheus/prometheus.yml \
            --storage.tsdb.path /var/lib/prometheus/ \
            --web.console.templates=/etc/prometheus/consoles \
            --web.console.libraries=/etc/prometheus/console_libraries
          [Install]
          WantedBy=multi-user.target

    - name: Reload systemd
      ansible.builtin.systemd:
        daemon_reload: yes

    - name: Enable Prometheus service
      ansible.builtin.systemd:
        name: prometheus
        enabled: yes

    - name: Start Prometheus service
      ansible.builtin.systemd:
        name: prometheus
        state: started

    - name: Check Prometheus service status
      ansible.builtin.systemd:
        name: prometheus
        state: started
        enabled: yes

    - name: Display Prometheus installation success message
      debug:
        msg: "Prometheus has been successfully installed and started."

    - name: Download Node Exporter v1.8.2
      ansible.builtin.get_url:
        url: https://github.com/prometheus/node_exporter/releases/download/v1.8.2/node_exporter-1.8.2.linux-amd64.tar.gz
        dest: /tmp/node_exporter-1.8.2.linux-amd64.tar.gz

    - name: Extract Node Exporter archive
      ansible.builtin.unarchive:
        src: /tmp/node_exporter-1.8.2.linux-amd64.tar.gz
        dest: /tmp/
        remote_src: yes

    - name: Move Node Exporter binary to /usr/local/bin
      ansible.builtin.copy:
        src: /tmp/node_exporter-1.8.2.linux-amd64/node_exporter
        dest: /usr/local/bin/node_exporter
        mode: '0755'

    - name: Verify Node Exporter version
      ansible.builtin.command: /usr/local/bin/node_exporter --version

    - name: Create Node Exporter systemd service file
      ansible.builtin.copy:
        dest: /etc/systemd/system/node_exporter.service
        content: |
          [Unit]
          Description=Node Exporter
          Wants=network-online.target
          After=network-online.target

          [Service]
          User=prometheus
          ExecStart=/usr/local/bin/node_exporter

          [Install]
          WantedBy=default.target

    - name: Reload systemd for Node Exporter
      ansible.builtin.systemd:
        daemon_reload: yes

    - name: Enable Node Exporter service
      ansible.builtin.systemd:
        name: node_exporter
        enabled: yes

    - name: Start Node Exporter service
      ansible.builtin.systemd:
        name: node_exporter
        state: started

    - name: Restart Prometheus service
      ansible.builtin.systemd:
        name: prometheus
        state: restarted

# Play 2: Install Grafana
- name: Install and configure Grafana
  hosts: localhost
  become: true

  tasks:
    # Step 1: Install apt-transport-https
    - name: Install apt-transport-https
      apt:
        name: apt-transport-https
        state: present
        update_cache: yes

    # Step 2: Add Grafana GPG key
    - name: Add Grafana GPG key
      apt_key:
        url: https://packages.grafana.com/gpg.key
        state: present

    # Step 3: Add Grafana repository
    - name: Add Grafana repository
      apt_repository:
        repo: "deb https://packages.grafana.com/oss/deb stable main"
        state: present

    # Step 4: Install Grafana
    - name: Update apt cache and install Grafana
      apt:
        name: grafana
        state: present
        update_cache: yes

    # Step 5: Enable and start Grafana service
    - name: Enable and start Grafana service
      systemd:
        name: grafana-server
        enabled: yes
        state: started

    # Step 6: Reset Grafana admin password
    - name: Stop Grafana server
      systemd:
        name: grafana-server
        state: stopped

    - name: Reset Grafana admin password
      command: grafana-cli admin reset-admin-password 123456789

    - name: Start Grafana server
      systemd:
        name: grafana-server
        state: started

    # Step 7: Display success message for Grafana installation
    - name: Display Grafana installation success message
      debug:
        msg: "Grafana has been successfully installed and started. Admin password has been reset."

#Docker
- name: Install and configure Docker
  hosts: localhost
  become: true

  tasks:
    # Step 1: Update the apt package index
    - name: Update apt package index
      apt:
        update_cache: yes

    # Step 2: Install required dependencies
    - name: Install required packages
      apt:
        name:
          - ca-certificates
          - curl
        state: present

    # Step 3: Create the /etc/apt/keyrings directory
    - name: Create directory for Docker GPG key
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    # Step 4: Download Docker’s official GPG key
    - name: Download Docker GPG key
      get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /etc/apt/keyrings/docker.asc
        mode: '0644'

    # Step 5: Add Docker repository to apt sources
    - name: Add Docker apt repository
      shell: |
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
        $(. /etc/os-release && echo \"$VERSION_CODENAME\") stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null

    # Step 6: Update apt package index again after adding Docker repo
    - name: Update apt package index after adding Docker repository
      apt:
        update_cache: yes

    # Step 7: Install Docker packages
    - name: Install Docker packages
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present

    # Step 8: Add docker group (if it doesn't exist)
    - name: Create docker group
      group:
        name: docker
        state: present

    # Step 9: Add current user to docker group
    - name: Add current user to docker group
      user:
        name: "{{ lookup('env', 'USER') }}"
        groups: docker
        append: yes

    # Step 10: Start a new shell session to apply docker group membership (newgrp is interactive, so skipping)
    # Skipping newgrp docker command as it is an interactive command. User will need to log out and back in to apply group changes.

    # Step 11: Enable and start Docker service
    - name: Enable and start Docker service
      systemd:
        name: docker
        enabled: yes
        state: started

    # Step 12: Display success message for Docker installation
    - name: Display Docker installation success message
      debug:
        msg: "Docker has been successfully installed and started. Please log out and log back in to apply the Docker group membership."



- name: Install Jenkins and JDK on Debian-based system
  hosts: localhost
  become: yes
  tasks:
    - name: Update apt package index
      apt:
        update_cache: yes

    - name: Install OpenJDK 17 and fontconfig
      apt:
        name:
          - fontconfig
          - openjdk-17-jre
        state: present

    - name: Verify Java version
      command: java -version
      register: java_version_output
      ignore_errors: yes

    - name: Show Java version
      debug:
        msg: "Java version installed: {{ java_version_output.stderr_lines[0] }}"
      when: java_version_output is defined

    - name: Download Jenkins keyring
      get_url:
        url: https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key
        dest: /usr/share/keyrings/jenkins-keyring.asc

    - name: Add Jenkins repository
      apt_repository:
        repo: "deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] https://pkg.jenkins.io/debian-stable binary/"
        state: present
        filename: 'jenkins'

    - name: Update apt package index after adding Jenkins repo
      apt:
        update_cache: yes

    - name: Install Jenkins
      apt:
        name: jenkins
        state: present

    - name: Enable Jenkins service
      systemd:
        name: jenkins
        enabled: yes

    - name: Start Jenkins service
      systemd:
        name: jenkins
        state: started

    - name: Get Jenkins version
      command: jenkins --version
      register: jenkins_version_output
      ignore_errors: yes

    - name: Show Jenkins version
      debug:
        msg: "Jenkins version installed: {{ jenkins_version_output.stdout }}"
      when: jenkins_version_output is defined

    - name: Check Jenkins service status
      systemd:
        name: jenkins
        state: started
        enabled: yes
